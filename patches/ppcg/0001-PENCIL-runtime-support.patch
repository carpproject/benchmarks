From 8f1618eb1610a4c506d159cfd9f9f12424f10433 Mon Sep 17 00:00:00 2001
From: Alexey Kravets <alexey.kravets@arm.com>
Date: Tue, 28 Oct 2014 17:14:43 +0000
Subject: [PATCH] PENCIL runtime support.

---
 README          |   7 ++
 ocl_utilities.c |   7 +-
 ocl_utilities.h |  32 +++++
 opencl.c        | 362 +++++++++++++++++++++++++++++++++++++++-----------------
 ppcg_options.c  |   2 +
 ppcg_options.h  |   2 +
 6 files changed, 300 insertions(+), 112 deletions(-)
 create mode 100644 ocl_utilities.h

diff --git a/README b/README
index 13a2da2..103405a 100644
--- a/README
+++ b/README
@@ -71,6 +71,13 @@ To generate OpenCL code run
 where file.c is the file containing the fragment.  The generated code
 is stored in file_host.c and file_kernel.cl.
 
+To generate OpenCL code that uses the PENCIL runtime library, run
+
+	ppcg --target=opencl --opencl-pencil-runtime file.c
+
+where file.c is the file containing the fragment.  The generated code
+is stored in file_host.c and file_kernel.cl.
+
 
 Specifying tile, grid and block sizes
 
diff --git a/ocl_utilities.c b/ocl_utilities.c
index e7e8628..c7a2156 100644
--- a/ocl_utilities.c
+++ b/ocl_utilities.c
@@ -1,11 +1,6 @@
 #include <stdio.h>
 #include <stdlib.h>
-
-#if defined(__APPLE__)
-#include <OpenCL/opencl.h>
-#else
-#include <CL/opencl.h>
-#endif
+#include "ocl_utilities.h"
 
 /* Return the OpenCL error string for a given error number.
  */
diff --git a/ocl_utilities.h b/ocl_utilities.h
new file mode 100644
index 0000000..34a987e
--- /dev/null
+++ b/ocl_utilities.h
@@ -0,0 +1,32 @@
+#ifndef OCL_UTILITIES_H
+#define OCL_UTILITIES_H
+
+#if defined(__APPLE__)
+#include <OpenCL/opencl.h>
+#else
+#include <CL/opencl.h>
+#endif
+
+/* Return the OpenCL error string for a given error number.
+ */
+const char *opencl_error_string(cl_int error);
+
+/* Find a GPU or a CPU associated with the first available platform.
+ * If use_gpu is set, then this function first tries to look for a GPU
+ * in the first available platform.
+ * If this fails or if use_gpu is not set, then it tries to use the CPU.
+ */
+cl_device_id opencl_create_device(int use_gpu);
+
+/* Create an OpenCL program from a string and compile it.
+ */
+cl_program opencl_build_program_from_string(cl_context ctx, cl_device_id dev,
+	const char *program_source, size_t program_size,
+	const char *opencl_options);
+
+/* Create an OpenCL program from a source file and compile it.
+ */
+cl_program opencl_build_program_from_file(cl_context ctx, cl_device_id dev,
+	const char* filename, const char* opencl_options);
+
+#endif
diff --git a/opencl.c b/opencl.c
index 9f7920a..80a8d30 100644
--- a/opencl.c
+++ b/opencl.c
@@ -31,8 +31,7 @@
  * kernel_c_name is the name of the kernel_c file.
  * kprinter is an isl_printer for the kernel file.
  * host_c is the generated source file for the host code.  kernel_c is
- * the generated source file for the kernel.  kernel_h is the generated
- * header file for the kernel.
+ * the generated source file for the kernel.
  */
 struct opencl_info {
 	struct ppcg_options *options;
@@ -44,7 +43,6 @@ struct opencl_info {
 
 	FILE *host_c;
 	FILE *kernel_c;
-	FILE *kernel_h;
 };
 
 /* Open the file called "name" for writing or print an error message.
@@ -92,38 +90,21 @@ static int opencl_open_files(struct opencl_info *info)
 	strcpy(info->kernel_c_name + len, "_kernel.cl");
 	info->kernel_c = open_or_croak(info->kernel_c_name);
 
-	strcpy(name + len, "_kernel.h");
-	info->kernel_h = open_or_croak(name);
-
-	if (!info->host_c || !info->kernel_c || !info->kernel_h)
+	if (!info->host_c || !info->kernel_c)
 		return -1;
 
 	fprintf(info->host_c, "#include <assert.h>\n");
 	fprintf(info->host_c, "#include <stdio.h>\n");
-	fprintf(info->host_c, "#include \"%s\"\n\n", ppcg_base_name(name));
+	fprintf(info->host_c, "#include \"ocl_utilities.h\"\n");
 	if (info->options->opencl_embed_kernel_code) {
 		fprintf(info->host_c, "#include \"%s\"\n\n",
 			info->kernel_c_name);
 	}
 
-	fprintf(info->kernel_h, "#if defined(__APPLE__)\n");
-	fprintf(info->kernel_h, "#include <OpenCL/opencl.h>\n");
-	fprintf(info->kernel_h, "#else\n");
-	fprintf(info->kernel_h, "#include <CL/opencl.h>\n");
-	fprintf(info->kernel_h, "#endif\n\n");
-	fprintf(info->kernel_h, "cl_device_id opencl_create_device("
-				"int use_gpu);\n");
-	fprintf(info->kernel_h, "cl_program opencl_build_program_from_string("
-				"cl_context ctx, "
-				"cl_device_id dev, const char *program_source, "
-				"size_t program_size, "
-				"const char *opencl_options);\n");
-	fprintf(info->kernel_h, "cl_program opencl_build_program_from_file("
-				"cl_context ctx, "
-				"cl_device_id dev, const char *filename, "
-				"const char *opencl_options);\n");
-	fprintf(info->kernel_h,
-		"const char *opencl_error_string(cl_int error);\n");
+	if (info->options->opencl_pencil_runtime) {
+		fprintf(info->host_c, "#include <pencil_runtime.h>\n");
+		fprintf(info->host_c, "#include <opencl/pencil_int.h>\n");
+	}
 	for (i = 0; i < info->options->opencl_n_include_file; ++i) {
 		info->kprinter = isl_printer_print_str(info->kprinter,
 					"#include <");
@@ -217,8 +198,6 @@ static int opencl_close_files(struct opencl_info *info)
 		r = opencl_write_kernel_file(info);
 		fclose(info->kernel_c);
 	}
-	if (info->kernel_h)
-		fclose(info->kernel_h);
 	if (info->host_c)
 		fclose(info->host_c);
 
@@ -246,7 +225,8 @@ static __isl_give isl_printer *opencl_print_host_macros(
 }
 
 static __isl_give isl_printer *opencl_declare_device_arrays(
-	__isl_take isl_printer *p, struct gpu_prog *prog)
+	__isl_take isl_printer *p, struct gpu_prog *prog,
+	struct opencl_info *info)
 {
 	int i;
 
@@ -254,7 +234,10 @@ static __isl_give isl_printer *opencl_declare_device_arrays(
 		if (gpu_array_is_read_only_scalar(&prog->array[i]))
 			continue;
 		p = isl_printer_start_line(p);
-		p = isl_printer_print_str(p, "cl_mem dev_");
+		if (info->options->opencl_pencil_runtime)
+			p = isl_printer_print_str(p, "pencil_cl_mem dev_");
+		else
+			p = isl_printer_print_str(p, "cl_mem dev_");
 		p = isl_printer_print_str(p, prog->array[i].name);
 		p = isl_printer_print_str(p, ";");
 		p = isl_printer_end_line(p);
@@ -282,9 +265,12 @@ static int is_array_positive_size_guard_trivial(struct gpu_array_info *array)
  *
  * Emit a max-expression to ensure the device array can contain at least one
  * element if the array's positive size guard expression is not trivial.
+ *
+ * If the opencl-pencil-runtime option is given, we pass the array as a host
+ * pointer to opencl_create_device_buffer if the needs_ptr flag is nonzero.
  */
 static __isl_give isl_printer *allocate_device_array(__isl_take isl_printer *p,
-	struct gpu_array_info *array)
+	struct gpu_array_info *array, int needs_ptr, struct opencl_info *info)
 {
 	int need_lower_bound;
 
@@ -293,7 +279,10 @@ static __isl_give isl_printer *allocate_device_array(__isl_take isl_printer *p,
 	p = isl_printer_start_line(p);
 	p = isl_printer_print_str(p, "dev_");
 	p = isl_printer_print_str(p, array->name);
-	p = isl_printer_print_str(p, " = clCreateBuffer(context, ");
+	if (info->options->opencl_pencil_runtime)
+		p = isl_printer_print_str(p, " = opencl_create_device_buffer(");
+	else
+		p = isl_printer_print_str(p, " = clCreateBuffer(context, ");
 	p = isl_printer_print_str(p, "CL_MEM_READ_WRITE, ");
 
 	need_lower_bound = !is_array_positive_size_guard_trivial(array);
@@ -306,10 +295,19 @@ static __isl_give isl_printer *allocate_device_array(__isl_take isl_printer *p,
 	if (need_lower_bound)
 		p = isl_printer_print_str(p, ")");
 
-	p = isl_printer_print_str(p, ", NULL, &err);");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(err);");
+	if (info->options->opencl_pencil_runtime) {
+		p = isl_printer_print_str(p, ", ");
+		if (needs_ptr)
+			p = isl_printer_print_str(p, array->name);
+		else
+			p = isl_printer_print_str(p, "NULL");
+		p = isl_printer_print_str(p, ");");
+	} else {
+		p = isl_printer_print_str(p, ", NULL, &err);");
+		p = isl_printer_end_line(p);
+		p = isl_printer_start_line(p);
+		p = isl_printer_print_str(p, "openclCheckReturn(err);");
+	}
 	p = isl_printer_end_line(p);
 
 	p = ppcg_end_block(p);
@@ -320,24 +318,33 @@ static __isl_give isl_printer *allocate_device_array(__isl_take isl_printer *p,
 /* Allocate device arrays.
  */
 static __isl_give isl_printer *opencl_allocate_device_arrays(
-	__isl_take isl_printer *p, struct gpu_prog *prog)
+	__isl_take isl_printer *p, struct gpu_prog *prog,
+	struct opencl_info *info)
 {
 	int i;
 
 	for (i = 0; i < prog->n_array; ++i) {
 		struct gpu_array_info *array = &prog->array[i];
+		isl_space *space;
+		isl_set *read_i;
+		int empty;
 
 		if (gpu_array_is_read_only_scalar(array))
 			continue;
 
-		p = allocate_device_array(p, array);
+		space = isl_space_copy(array->space);
+		read_i = isl_union_set_extract_set(prog->copy_in, space);
+		empty = isl_set_plain_is_empty(read_i);
+		isl_set_free(read_i);
+
+		p = allocate_device_array(p, array, !empty, info);
 	}
 	p = isl_printer_start_line(p);
 	p = isl_printer_end_line(p);
 	return p;
 }
 
-/* Print a call to the OpenCL clSetKernelArg() function which sets
+/* Print a call to the OpenCL or PENCIL runtime function which sets
  * the arguments of the kernel.  arg_name and arg_index are the name and the
  * index of the kernel argument.  The index of the leftmost argument of
  * the kernel is 0 whereas the index of the rightmost argument of the kernel
@@ -346,12 +353,16 @@ static __isl_give isl_printer *opencl_allocate_device_arrays(
  * only scalar.
  */
 static __isl_give isl_printer *opencl_set_kernel_argument(
-	__isl_take isl_printer *p, int kernel_id,
+	__isl_take isl_printer *p, struct opencl_info *info, int kernel_id,
 	const char *arg_name, int arg_index, int read_only_scalar)
 {
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p,
-		"openclCheckReturn(clSetKernelArg(kernel");
+	if (info->options->opencl_pencil_runtime)
+		p = isl_printer_print_str(p, "opencl_set_kernel_arg(");
+	else
+		p = isl_printer_print_str(p,
+				"openclCheckReturn(clSetKernelArg(");
+	p = isl_printer_print_str(p, "kernel");
 	p = isl_printer_print_int(p, kernel_id);
 	p = isl_printer_print_str(p, ", ");
 	p = isl_printer_print_int(p, arg_index);
@@ -364,7 +375,17 @@ static __isl_give isl_printer *opencl_set_kernel_argument(
 		p = isl_printer_print_str(p, "cl_mem), (void *) &dev_");
 
 	p = isl_printer_print_str(p, arg_name);
-	p = isl_printer_print_str(p, "));");
+
+	if (info->options->opencl_pencil_runtime) {
+		if (read_only_scalar)
+			p = isl_printer_print_str(p, ", 0");
+		else
+			p = isl_printer_print_str(p, ", 1");
+	}
+
+	if (!info->options->opencl_pencil_runtime)
+		p = isl_printer_print_str(p, ")");
+	p = isl_printer_print_str(p, ");");
 	p = isl_printer_end_line(p);
 
 	return p;
@@ -395,7 +416,7 @@ static __isl_give isl_printer *opencl_print_block_sizes(
  */
 static __isl_give isl_printer *opencl_set_kernel_arguments(
 	__isl_take isl_printer *p, struct gpu_prog *prog,
-	struct ppcg_kernel *kernel)
+	struct ppcg_kernel *kernel, struct opencl_info *info)
 {
 	int i, n, ro;
 	unsigned nparam;
@@ -413,8 +434,8 @@ static __isl_give isl_printer *opencl_set_kernel_arguments(
 		if (empty)
 			continue;
 		ro = gpu_array_is_read_only_scalar(&prog->array[i]);
-		opencl_set_kernel_argument(p, kernel->id, prog->array[i].name,
-			arg_index, ro);
+		opencl_set_kernel_argument(p, info, kernel->id,
+			prog->array[i].name, arg_index, ro);
 		arg_index++;
 	}
 
@@ -424,7 +445,8 @@ static __isl_give isl_printer *opencl_set_kernel_arguments(
 		const char *name;
 
 		name = isl_space_get_dim_name(space, isl_dim_param, i);
-		opencl_set_kernel_argument(p, kernel->id, name, arg_index, 1);
+		opencl_set_kernel_argument(p, info, kernel->id, name,
+			arg_index, 1);
 		arg_index++;
 	}
 	isl_space_free(space);
@@ -434,7 +456,8 @@ static __isl_give isl_printer *opencl_set_kernel_arguments(
 		const char *name;
 
 		name = isl_space_get_dim_name(kernel->space, isl_dim_set, i);
-		opencl_set_kernel_argument(p, kernel->id, name, arg_index, 1);
+		opencl_set_kernel_argument(p, info, kernel->id, name,
+			arg_index, 1);
 		arg_index++;
 	}
 
@@ -837,7 +860,7 @@ static __isl_give isl_printer *opencl_print_total_number_of_work_items_as_list(
 /* Copy "array" from the host to the device (to_host = 0) or
  * back from the device to the host (to_host = 1).
  */
-static __isl_give isl_printer *copy_array(__isl_take isl_printer *p,
+static __isl_give isl_printer *opencl_copy_array(__isl_take isl_printer *p,
 	struct gpu_array_info *array, int to_host)
 {
 	p = isl_printer_start_line(p);
@@ -862,14 +885,43 @@ static __isl_give isl_printer *copy_array(__isl_take isl_printer *p,
 	return p;
 }
 
+static __isl_give isl_printer *pencil_runtime_copy_array(
+	__isl_take isl_printer *p, struct gpu_array_info *array, int to_host)
+{
+	p = isl_printer_start_line(p);
+	if (to_host)
+		p = isl_printer_print_str(p, "opencl_copy_to_host");
+	else
+		p = isl_printer_print_str(p, "opencl_copy_to_device");
+	p = isl_printer_print_str(p, "(dev_");
+	p = isl_printer_print_str(p, array->name);
+	p = isl_printer_print_str(p, ", ");
+	p = gpu_array_info_print_size(p, array);
+	if (gpu_array_is_scalar(array))
+		p = isl_printer_print_str(p, ", &");
+	else
+		p = isl_printer_print_str(p, ", ");
+	p = isl_printer_print_str(p, array->name);
+	p = isl_printer_print_str(p, ");");
+	p = isl_printer_end_line(p);
+}
+
+struct copy_array_data_opencl {
+	struct opencl_info *opencl;
+	struct gpu_array_info *array;
+};
+
 /* Copy "array" from the host to the device.
  */
 static __isl_give isl_printer *copy_array_to_device(__isl_take isl_printer *p,
 	void *user)
 {
-	struct gpu_array_info *array = user;
+	struct copy_array_data_opencl *data = user;
 
-	return copy_array(p, array, 0);
+	if (data->opencl->options->opencl_pencil_runtime)
+		return pencil_runtime_copy_array(p, data->array, 0);
+	else
+		return opencl_copy_array(p, data->array, 0);
 }
 
 /* Copy "array" back from the device to the host.
@@ -877,9 +929,12 @@ static __isl_give isl_printer *copy_array_to_device(__isl_take isl_printer *p,
 static __isl_give isl_printer *copy_array_from_device(__isl_take isl_printer *p,
 	void *user)
 {
-	struct gpu_array_info *array = user;
+	struct copy_array_data_opencl *data = user;
 
-	return copy_array(p, array, 1);
+	if (data->opencl->options->opencl_pencil_runtime)
+		return pencil_runtime_copy_array(p, data->array, 1);
+	else
+		return opencl_copy_array(p, data->array, 1);
 }
 
 /* Copy the "copy" arrays from the host to the device (to_host = 0) or
@@ -888,12 +943,14 @@ static __isl_give isl_printer *copy_array_from_device(__isl_take isl_printer *p,
  * Only perform the copying for arrays with strictly positive size.
  */
 static __isl_give isl_printer *opencl_copy_arrays(__isl_take isl_printer *p,
-	struct gpu_prog *prog, __isl_keep isl_union_set *copy, int to_host)
+	struct gpu_prog *prog, __isl_keep isl_union_set *copy, int to_host,
+	struct opencl_info *info)
 {
 	int i;
 
 	for (i = 0; i < prog->n_array; ++i) {
 		struct gpu_array_info *array = &prog->array[i];
+		struct copy_array_data_opencl copy_data = { info, array };
 		isl_space *space;
 		isl_set *copy_i;
 		isl_set *guard;
@@ -912,7 +969,8 @@ static __isl_give isl_printer *opencl_copy_arrays(__isl_take isl_printer *p,
 		guard = gpu_array_positive_size_guard(array);
 		p = ppcg_print_guarded(p, guard, isl_set_copy(prog->context),
 					to_host ? &copy_array_from_device :
-						  &copy_array_to_device, array);
+						  &copy_array_to_device,
+					&copy_data);
 	}
 
 	p = isl_printer_start_line(p);
@@ -923,17 +981,19 @@ static __isl_give isl_printer *opencl_copy_arrays(__isl_take isl_printer *p,
 /* Copy the prog->copy_in arrays from the host to the device.
  */
 static __isl_give isl_printer *opencl_copy_arrays_to_device(
-	__isl_take isl_printer *p, struct gpu_prog *prog)
+	__isl_take isl_printer *p, struct gpu_prog *prog,
+	struct opencl_info *info)
 {
-	return opencl_copy_arrays(p, prog, prog->copy_in, 0);
+	return opencl_copy_arrays(p, prog, prog->copy_in, 0, info);
 }
 
 /* Copy the prog->copy_out arrays back from the device to the host.
  */
 static __isl_give isl_printer *opencl_copy_arrays_from_device(
-	__isl_take isl_printer *p, struct gpu_prog *prog)
+	__isl_take isl_printer *p, struct gpu_prog *prog,
+	struct opencl_info *info)
 {
-	return opencl_copy_arrays(p, prog, prog->copy_out, 1);
+	return opencl_copy_arrays(p, prog, prog->copy_out, 1, info);
 }
 
 /* Print the user statement of the host code to "p".
@@ -1004,42 +1064,73 @@ static __isl_give isl_printer *opencl_print_host_user(
 	p = isl_printer_print_str(p, "};");
 	p = isl_printer_end_line(p);
 
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "cl_kernel kernel");
-	p = isl_printer_print_int(p, kernel->id);
-	p = isl_printer_print_str(p, " = clCreateKernel(program, \"kernel");
-	p = isl_printer_print_int(p, kernel->id);
-	p = isl_printer_print_str(p, "\", &err);");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(err);");
-	p = isl_printer_end_line(p);
+	if (data->opencl->options->opencl_pencil_runtime) {
+		p = isl_printer_start_line(p);
+		p = isl_printer_print_str(p, "pencil_cl_kernel kernel");
+		p = isl_printer_print_int(p, kernel->id);
+		p = isl_printer_print_str(p, " = opencl_create_kernel(program, "
+								"\"kernel");
+		p = isl_printer_print_int(p, kernel->id);
+		p = isl_printer_print_str(p, "\");");
+		p = isl_printer_end_line(p);
+	} else {
+		p = isl_printer_start_line(p);
+		p = isl_printer_print_str(p, "cl_kernel kernel");
+		p = isl_printer_print_int(p, kernel->id);
+		p = isl_printer_print_str(p, " = clCreateKernel(program, "
+								"\"kernel");
+		p = isl_printer_print_int(p, kernel->id);
+		p = isl_printer_print_str(p, "\", &err);");
+		p = isl_printer_end_line(p);
+		p = isl_printer_start_line(p);
+		p = isl_printer_print_str(p, "openclCheckReturn(err);");
+		p = isl_printer_end_line(p);
+	}
 
-	opencl_set_kernel_arguments(p, data->prog, kernel);
+	opencl_set_kernel_arguments(p, data->prog, kernel, data->opencl);
 
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn(clEnqueueNDRangeKernel"
-		"(queue, kernel");
-	p = isl_printer_print_int(p, kernel->id);
-	p = isl_printer_print_str(p, ", ");
-	if (kernel->n_block > 0)
-		p = isl_printer_print_int(p, kernel->n_block);
-	else
-		p = isl_printer_print_int(p, 1);
-
-	p = isl_printer_print_str(p, ", NULL, global_work_size, "
-					"block_size, "
-					"0, NULL, NULL));");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn("
-					"clReleaseKernel(kernel");
-	p = isl_printer_print_int(p, kernel->id);
-	p = isl_printer_print_str(p, "));");
-	p = isl_printer_end_line(p);
-	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "clFinish(queue);");
-	p = isl_printer_end_line(p);
+	if (data->opencl->options->opencl_pencil_runtime) {
+		p = isl_printer_start_line(p);
+		p = isl_printer_print_str(p, "opencl_launch_kernel(kernel");
+		p = isl_printer_print_int(p, kernel->id);
+		p = isl_printer_print_str(p, ", ");
+		if (kernel->n_block > 0)
+			p = isl_printer_print_int(p, kernel->n_block);
+		else
+			p = isl_printer_print_int(p, 1);
+		p = isl_printer_print_str(p,
+				", NULL, global_work_size, block_size);");
+		p = isl_printer_end_line(p);
+		p = isl_printer_start_line(p);
+		p = isl_printer_print_str(p, "opencl_release_kernel(kernel");
+		p = isl_printer_print_int(p, kernel->id);
+		p = isl_printer_print_str(p, ");");
+		p = isl_printer_end_line(p);
+	} else {
+		p = isl_printer_start_line(p);
+		p = isl_printer_print_str(p,
+			"openclCheckReturn(clEnqueueNDRangeKernel"
+			"(queue, kernel");
+		p = isl_printer_print_int(p, kernel->id);
+		p = isl_printer_print_str(p, ", ");
+		if (kernel->n_block > 0)
+			p = isl_printer_print_int(p, kernel->n_block);
+		else
+			p = isl_printer_print_int(p, 1);
+		p = isl_printer_print_str(p, ", NULL, global_work_size, "
+						"block_size, "
+						"0, NULL, NULL));");
+		p = isl_printer_end_line(p);
+		p = isl_printer_start_line(p);
+		p = isl_printer_print_str(p,
+			"openclCheckReturn(clReleaseKernel(kernel");
+		p = isl_printer_print_int(p, kernel->id);
+		p = isl_printer_print_str(p, "));");
+		p = isl_printer_end_line(p);
+		p = isl_printer_start_line(p);
+		p = isl_printer_print_str(p, "clFinish(queue);");
+		p = isl_printer_end_line(p);
+	}
 	p = isl_printer_indent(p, -2);
 	p = isl_printer_start_line(p);
 	p = isl_printer_print_str(p, "}");
@@ -1160,16 +1251,65 @@ static __isl_give isl_printer *opencl_release_cl_objects(
 	return p;
 }
 
+static __isl_give isl_printer *pencil_runtime_setup(__isl_take isl_printer *p,
+	const char *input, struct opencl_info *info)
+{
+	p = isl_printer_start_line(p);
+	p = isl_printer_print_str(p, "pencil_cl_program program;");
+	p = isl_printer_end_line(p);
+
+	p = isl_printer_start_line(p);
+	p = isl_printer_print_str(p, "pencil_init(PENCIL_TARGET_DEVICE_DYNAMIC);");
+	p = isl_printer_end_line(p);
+
+	p = isl_printer_start_line(p);
+	p = isl_printer_print_str(p, "program = ");
+
+	if (info->options->opencl_embed_kernel_code) {
+		p = isl_printer_print_str(p,
+			"opencl_create_program_from_string(kernel_code, "
+						"sizeof(kernel_code), \"");
+	} else {
+		p = isl_printer_print_str(p, "opencl_create_program_from_file("
+						"\"");
+		p = isl_printer_print_str(p, info->kernel_c_name);
+		p = isl_printer_print_str(p, "\", \"");
+	}
+
+	if (info->options->opencl_compiler_options)
+		p = isl_printer_print_str(p,
+					info->options->opencl_compiler_options);
+
+	p = isl_printer_print_str(p, "\");");
+	p = isl_printer_end_line(p);
+	return p;
+}
+
+static __isl_give isl_printer *pencil_runtime_release(
+	__isl_take isl_printer *p)
+{
+	p = isl_printer_start_line(p);
+	p = isl_printer_print_str(p, "pencil_shutdown();");
+	p = isl_printer_end_line(p);
+
+	return p;
+}
+
 /* Free the device array corresponding to "array"
  */
 static __isl_give isl_printer *release_device_array(__isl_take isl_printer *p,
-	struct gpu_array_info *array)
+	struct gpu_array_info *array, struct opencl_info *info)
 {
 	p = isl_printer_start_line(p);
-	p = isl_printer_print_str(p, "openclCheckReturn("
-					"clReleaseMemObject(dev_");
+	if (info->options->opencl_pencil_runtime)
+		p = isl_printer_print_str(p, "opencl_release_buffer(dev_");
+	else
+		p = isl_printer_print_str(p,
+			"openclCheckReturn(clReleaseMemObject(dev_");
 	p = isl_printer_print_str(p, array->name);
-	p = isl_printer_print_str(p, "));");
+	if (!info->options->opencl_pencil_runtime)
+		p = isl_printer_print_str(p, ")");
+	p = isl_printer_print_str(p, ");");
 	p = isl_printer_end_line(p);
 
 	return p;
@@ -1178,7 +1318,8 @@ static __isl_give isl_printer *release_device_array(__isl_take isl_printer *p,
 /* Free the device arrays.
  */
 static __isl_give isl_printer *opencl_release_device_arrays(
-	__isl_take isl_printer *p, struct gpu_prog *prog)
+	__isl_take isl_printer *p, struct gpu_prog *prog,
+	struct opencl_info *info)
 {
 	int i;
 
@@ -1187,7 +1328,7 @@ static __isl_give isl_printer *opencl_release_device_arrays(
 		if (gpu_array_is_read_only_scalar(array))
 			continue;
 
-		p = release_device_array(p, array);
+		p = release_device_array(p, array, info);
 	}
 	return p;
 }
@@ -1215,16 +1356,25 @@ static __isl_give isl_printer *print_opencl(__isl_take isl_printer *p,
 
 	p = opencl_print_host_macros(p);
 
-	p = opencl_declare_device_arrays(p, prog);
-	p = opencl_setup(p, opencl->input, opencl);
-	p = opencl_allocate_device_arrays(p, prog);
-	p = opencl_copy_arrays_to_device(p, prog);
+	p = opencl_declare_device_arrays(p, prog, opencl);
+
+	if (opencl->options->opencl_pencil_runtime)
+		p = pencil_runtime_setup(p, opencl->input, opencl);
+	else
+		p = opencl_setup(p, opencl->input, opencl);
+
+	p = opencl_allocate_device_arrays(p, prog, opencl);
+	p = opencl_copy_arrays_to_device(p, prog, opencl);
 
 	p = opencl_print_host_code(p, prog, tree, opencl);
 
-	p = opencl_copy_arrays_from_device(p, prog);
-	p = opencl_release_device_arrays(p, prog);
-	p = opencl_release_cl_objects(p, opencl);
+	p = opencl_copy_arrays_from_device(p, prog, opencl);
+	p = opencl_release_device_arrays(p, prog, opencl);
+
+	if (opencl->options->opencl_pencil_runtime)
+		p = pencil_runtime_release(p);
+	else
+		p = opencl_release_cl_objects(p, opencl);
 
 	p = ppcg_end_block(p);
 
diff --git a/ppcg_options.c b/ppcg_options.c
index 72e8055..1663166 100644
--- a/ppcg_options.c
+++ b/ppcg_options.c
@@ -38,6 +38,8 @@ ISL_ARG_STR_LIST(struct ppcg_options, opencl_n_include_file,
 	"file to #include in generated OpenCL code")
 ISL_ARG_BOOL(struct ppcg_options, opencl_embed_kernel_code, 0,
 	"embed-kernel-code", 0, "embed kernel code into host code")
+ISL_ARG_BOOL(struct ppcg_options, opencl_pencil_runtime, 0,
+	"pencil-runtime", 0, "use OpenCL PENCIL runtime")
 ISL_ARGS_END
 
 ISL_ARGS_START(struct ppcg_options, ppcg_options_args)
diff --git a/ppcg_options.h b/ppcg_options.h
index 949e139..1bd2082 100644
--- a/ppcg_options.h
+++ b/ppcg_options.h
@@ -52,6 +52,8 @@ struct ppcg_options {
 	const char **opencl_include_files;
 	/* Embed OpenCL kernel code in host code. */
 	int opencl_embed_kernel_code;
+	/* Use OpenCL PENCIL runtime. */
+	int opencl_pencil_runtime;
 };
 
 ISL_ARG_DECL(ppcg_debug_options, struct ppcg_debug_options,
-- 
2.0.0

